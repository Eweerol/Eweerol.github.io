{"meta":{"title":"Eweerol","subtitle":null,"description":null,"author":"Eweerol","url":"https://eweerol.github.io","root":"/"},"pages":[{"title":"tags","date":"2019-08-18T14:05:37.000Z","updated":"2019-08-18T14:07:18.793Z","comments":true,"path":"tags/index.html","permalink":"https://eweerol.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"高级距离矢量路由EIGRP","date":"2019-08-16T15:54:08.425Z","updated":"2019-08-16T15:45:18.278Z","comments":true,"path":"2019/08/16/高级距离矢量路由EIGRP/","link":"","permalink":"https://eweerol.github.io/2019/08/16/高级距离矢量路由EIGRP/","excerpt":"","text":"高级距离矢量路由EIGRP EIGRP特点· 距离矢量：路由管理距离为90； · 无环路的无类路由：携带子网掩码信息； · 在开销相等和不相等的路径上实现负载均衡； · 用组播地址：224.0.0.10和单播地址代表广播地址； · 支持 VLSM 和不连续的子网 · 在 Internet 网络中的任意点手动汇总 · 支持多种网络层协议 工作原理邻居表 通过每5秒/60秒发送Hello报文形成邻居表； 发送路由更新到拓扑表（逐步更新，触发更新）； 若邻居连续错过3个Hello报文的路由将被视为无效； 拓扑表 形成网络拓扑，记录所有路由的路径，并根据表选择最优路由形成路由表； 路由表 当最优路由出现问题时，从本地拓扑表提取次优路由继续发送路由； 选择最优路由原则AD（通告距离）：下一跳到目的路由的度量值 FD（可行距离）：本路由到目的路由的度量值 FD值最小的成为最优路由，又称为：successor后继者 后继者和可行后继者 上表中，后继者为：C 可行后继者为：B 后继者（successor） 后继者是一个相邻路由器具有最低成本的路径到目的地（最低FD），是保证不会循环的 一部分。 后继路由用于转发数据包。 如果它们具有相同的FD,可以存在多条相同路径。 可行后继(Feasible successor ) 一个可行后继是离目的地很近的邻居,但不是最低开销的。 一个可行后继确保一个无环拓扑,因为它的AD必须小于后继的FD。 可行后继和后继在同一时间进行选择,但它只保存在拓扑表作为备份路径。 拓扑表中可以保存多个可行后继为一个目的地。 EIGRP度量值计算EIGRP 使用一个复合度量，可根据以下指标： 带宽 使用最小的带宽（BW）， 可靠性 是衡量一个链接将失败的可能性. 延迟 延迟是衡量一个包需要穿越路由的时间. 负载 反映了多少流量是使用链接 MTU 默认情况下使用，只有带宽和延迟. 注：这往往是不正确地指出，EIGRP的还可以使用路径中最小的MTU。事实上， MTU是包含在EIGRP路由更新，但实际上并没有使用metric计算。 Metric值计算 metric值的计算方法： metric值=256(10^7/bw+dly之和/10) bw:最小带宽 dly：延迟之和，路由传递方向所有入接口的dly值的累加 EIGRP配置 Router0配置： 1234567891011router eigrp 10 variance 15 network 11.0.0.0 network 12.0.0.0 network 13.0.0.0 no auto-summary Router1配置： 1234router eigrp 10 network 24.0.0.0 network 12.0.0.0 no auto-summary Router2配置： 1234router eigrp 10 network 34.0.0.0 network 13.0.0.0 no auto-summary Router3配置： 12345router eigrp 10 network 24.0.0.0 network 44.0.0.0 network 34.0.0.0 no auto-summary 反掩码：精确匹配 反掩码==255.255.255.255–子网掩码 11.1.0.0 0.0.0.255 //精确网段 检验EIGRP配置语句123456sh ip route eigrp //检查路由对应的eigrp配置sh ip protocols //检查运行的路由协议sh ip eigrp interfaces //查询端口所对应的Eigrp的管理距离以及自治区sh ip eigrp neighbors //查询eigrp邻居表sh ip eigrp topology //查询eigrp拓扑表sh ip eigrp traffic //查询eigrp中发送/接收的各种数据包量 EIGRP负载均衡等价均衡 默认支持4条，不同IOS版本不同 非等价均衡 条目数量配置：maximum-paths 非等价负载均衡配置：variance multiplier ​ 如何计算v值：v=Successor-FD/Fiseable-FD 取整 EIGRP MD5身份验证路由器对每个它发送的EIGRP数据包进行自我标识 路由器验证接收到的每个路由更新数据包的来源 每个参与的邻居都必须配置相同的密钥 ##只要key chain 的密码相同即可，其余不重要 配置步骤： 1.创建密钥链，它是一组可能的密钥（密码） 2.对每个密钥分配密钥ID 3.标识密钥 4.（可选）指定密钥的有效期 5.在接口上启用MD5身份验证 6.指定接口使用的密钥链 1234567891011121314151617181920212223Router(config)#key chain Key-chain name 进入密钥链配置模式Router(config-keychain)#key key-id 标识密钥并进入密钥ID的配置模式Router(config-keychain-key)#key-string text 标识密钥字符串（密码）Router(config-keychain-key)#accept-lifetime start-time &#123;infinite | end-time | duration seconds&#125; (可选)指定何时为收到的数据包接受密钥Router(config-keychain-key)#send-lifetime start-time &#123;infinite | end-time | duration seconds&#125; (可选)指定密钥可时可用于发送数据包Router(config-if)#ip authentication mode eigrp autonomous-system md5 为EIGRP数据包指定MD5身份验证Router(config-if)#ip authentication key-chain eigrp autonomous-system name-of-chain使用密钥链中的密钥来启用EIGRP数据包的身份验证 EIGRP实验实验目的：PC1 ping PC4 !!! 实验需求： 1. 全网运行动态路由协议EIGRP 2. 做MD5验证 3. 实现R1-R4非等价负载均衡 (1) 配置eigrp实现全网通信 查看邻居表：sh ip eigrp neighbors 查看拓朴表：sh ip eigrp topology ​ sh ip eigrp topology all-links 查看路由表：sh ip route ​ sh ip route eigrp （2） MD5验证（基于链路） （3） 做去往44.1.1.0网络的非等价负载 ​ 首先确定有没有Feasible successor ​ 计算v值：v*S FD &gt; FS FD ​ 配置V值：R1(config)#router eigrp 100 R1(config-router)#variance 6 ​ 验证配置： ​ sh ip route eigrp sh ip route 44.1.1.0 (4) 计算metric值: metric值= (5) EIGRP**路由汇总：ip summary-address eigrp 100 172.16.0.0 255.255.255.0** (6) 配置被动接口：passive-interface Loopback0 被动接口（passive interface）一般应用于优化，比如在我们的拓扑中R2上有一个环回口lo0:2.2.2.2，向lo0口发送EIGRP报文是没必要的，当我们在EIGRP路由进程下启用lo0的被动接口后，R2将不再向lo0发送任何EIGRP报文，但是lo0的路由还是会被R2发送出去。 问题：已经存储在路由本地的拓扑表，即使不能MD5认证，路由表中已经存在路由，所以可以继续进行通信，不受限制。","categories":[],"tags":[]},{"title":"","slug":"OSI参考模型1","date":"2019-08-16T10:39:09.337Z","updated":"2019-08-16T15:50:48.545Z","comments":true,"path":"2019/08/16/OSI参考模型1/","link":"","permalink":"https://eweerol.github.io/2019/08/16/OSI参考模型1/","excerpt":"","text":"OSPF参考模型解决不同厂商之间的计算机不能通信的问题，提出OSI参考模型； 应用层：最靠近用户的一层，为计算机用户提供应用接口，也为用户直接提供网络服务，常见的应用层网络服务协议：HTTP,HTTPS,FTP,POP3,SMTP等 HTTP：80 HTTPS:443 FTP-data:20/tcp # ftp,data FTP:21/tcp #ftp,control POP3:110/tcp #Post Office Protocol Version3 SMTP：25 /tcp mail #Simple Mail Transfer Protocol 表示层：集线器属于物理层设备； 数据链路层：802.3 FR帧中继 PPP点到点协议 二层广播地址：FF:FF:FF 网络层：路由，三层交换机， 协议：IP协议 传输层：建立端到端的服务连接 协议：TCP UDP 网络架构模型 核心层 汇聚层/集聚层 网络互连； 接入层 TCP/IP模型DOD模型： 记忆： 协议具体的作用以及对应端口服务！！！ Telnet:远程客户端机器( Telnet 客户端)的用户能够访问另一台机器( Telnet 服务器)的资源。，可与选定的远程主机交互的虚拟终端。 FTPFIP ( File Transfer Protocol ，文件传输协议)让你能够传输文件，这可在任何两台使用它的机器之间进行。然而， FTP 不仅仅是协议，还是程序。作为协议， FTP 供应用程序使用;作为程序， FTP用户手工执行与文件相关的任务。 FTP 让你能够访问目录和文件以及执行某些类型的目录操作，如将其移到其他目录中。通过 FTP 访问主机只是第一步，随后用户必须通过身份验证登录，因为系统管理员可能使用密码和用户名来限制访问。要避开这种身份验证，可使用用户名 anonymo邸，但这样获得的访问权将受到限制。即使被用户用作程序， FTP 的功能也仅限于列出和操作目录、输入文件内容以及在主机之间复制文件，而不能远程执行程序。 NFSNFS (NetworkFile System ，网络文件系统)是一种致力于文件共享的协议，让两种不同的文件系统能够互操作。其工作原理大致如下:假设 NFS 服务器端软件运行在 Windows 服务器上，而 NFS户端软件运行在 Unix 主机上， NFS Windows 服务器的部分 RAM 看起来像存储的是 Unix 文件，可Unix 用户使用。虽然 Windows 文件系统和 Unix 文件系统不同一一它们在是否区分大小写、文件名长度、安全性等方面不同，但 Unix 用户和 Windows 用户可像通常那样访问相同的文件，就像文件位于他们通常使用的文件系统中一样。 SMTPSMTP ( SimpleMail Transfer Protocol ，简单邮件传输协议)解决了无处不在的邮件收发需求，它使用假脱机(排队)的方式传递邮件。邮件到达目的地后，将被存储到设备(通常是磁盘)中。目标端的服务器软件定期检查队列，看其中是否有邮件。发现邮件后，它将把它们投递给收件人。 SMTP用于发送电子邮件，而 POP3 IMAP 用于接收邮件。 POPPOP (Post Office Protocol ，邮局协议)提供了一种对到来邮件进行存储的机制，其最新版本为POP3 这种协议的工作原理如下:客户端设备连接到 POP3 服务器后，可下载发送给它的邮件。它不允许选择性地下载邮件，但邮件下载后，客户端/服务器交互就结束了，用户可在本地随意删除和操作邮件。 TLSTLS (Transport Layer Security，传输层安全)及其前身 SSL ( Secure Sockets Layer ，安全套接字层)都是加密协议，非常适合用于确保在线数据传输的安全，如 Web 浏览、即时通信、因特阿传真等。 SIP （VoIP)SIP (Session lnitiation Protocol ，会话发起协议)是一种非常流行的信令胁议，用于建立和拆除多媒体通信会话，其应用非常广泛，可用于因特网上的语音和视频呼叫、视频会议、流媒体分发、即时通信、状态信息( presence infonnation )、在线游戏等。 RTP (VoIP)语音和视频 虽然它最初被设计为 一种组播协议，但现在也被用于单播应用程序中。它常被用于流式媒体、视频会议和一键通( push to tal.k )系统，这使其成了 VoIP (Voice over IP ，四语音)行业的事实标准。 SNMPSNMP (Simple Network Management Protocol ，简单网络管理协议)收集并操作有价值的网络信息。它运行在管理工作站上，定期或随机地轮询网络中的设备，要求它们暴露特定的信息，以收集数。在一切正常的情况下， SNMP 将收到基线 (baseline) 信息 即描述健康网络运行特征的报告协议还可充当网络的看门狗，将任何突发 件迅速告知管理员 这些网络 门狗称为代理，出现异常情况时，代理将向管理工作站发送称为 trap 的警告。 SSH安全外壳 (SSH) 协议通过标准 TCPIIP 连接建立安全的 Telnet 会话，用于执行如下操作:登录系统、在远程系统中运行程序以及在系统间传输文件等。它在执行这些操作时都使用健壮的加密连接。你可将其视为用于替代 rsh rlogi Telnet 的新 一代协议 HTTPSHTTPS(Hyp rtext Transfer Protoco1 Secure ，安全超文本传输协议)使用 SSL ( Secure Socket Layer ,安全套接字层)，有时也称为 SHTTP S-HTTP( 这是一个 HTTP 扩展，不使用 SSL )，但这无关紧要。顾名思义，它是安全版盯TP ，提供了一系列安全工具，可确保 Web 浏览器和 Web 服务器之间的通信安全。当你在网上预订或购物时，浏览器需要使用它来填写表格、签名、验证和加密 HTTP 消息。 NTPNTP (Network Time Protoco1 ，网络时间协议)用于将计算机时钟与标准时间源(通常是原子钟)同步，由特拉华大学的 DavidMills 教授开发 NTP 将设备同步，确保给定网络中所有计算机的时间一致。这虽然昕起来非常简单，但却非常重要，因为当今的很多交易都需要指出时间和日期。想想你的数据库吧，如果服务器不与相连的计算机同步，哪怕只相差几秒，也会带来严重的混乱(甚至崩溃)。如果某台机器在凌晨 1:50 发起交易，而服务器将交易时间记录为 1:45 ，交易将无法完成。因此， NTP可避免因”没有 De10rean①就回到未来”而导致网络崩费，这点确实非常重要。 IGMPIGMP (Internet Group Management Protocol ，因特网组管理协议)是一种用于管理 IP 组播会话的TCPIIP 协议，它这样完成其职责:通过网络发送唯一的 IGMP 消息，以揭示组播组信息，并找出主机所属的组播组。 网络中的主机也使用 IGMP 消息来加入和退出组播组。 IGMP 消息非常方便用于跟踪组成员关系以及激活组播流。 DNSDNS ( Domain Name Serv肘，域名服务)解析主机名，具体地说是因特网名称，如 www.routersim.com。你并非一定要使用 DNS ，可只输入要与之通信的设备的 IP 地址。 IP 地址表示网络和因特网中的主机，然而， DNS 旨在让我们的生活更便捷。想想下面这种情形:如果要将网页移到另一家服务提供商，结果将如何呢? IP 地址将改变，但没有人知道新的 IP 地址。 DNS 让你能够使用域名指定 IP址，你可以随时修改 IP 地址，而不会有人感觉到有何不同。DNS 用于解析 FQDN (Fully Qualified Domain Name ，全限定域名)，如 www.lammle.comtodd.lamm1e.como FQDN 是一种层次结构，可根据域名标识符查找系统。如果要解析名称 todd ，则要么输入 FQDNωdd.l ammle.com ，要么让设备(如 PC 或路由器)帮助你添加后级。例如，在思科路由器中，你可使用命令 ip domain-name lammle.com 给每个请求加上域名 lamrr .com。如果不这样做，则你必须输入 FQDN ，这样 DNS 才能对名称进行解析。 DHCP/BootPDHCP ( Dynamic Host Configuration Protocol ，动态主机配置协议)给主机分配 IP 地址，让管理工作更轻松，非常适合用于各种规模的网络。各种类型的硬件都可用作 DHCP 服务器，包括思科路由器。DHCP BootP (Bootstrap Protocol ，自举协议)的差别在于， BootP 给主机分配田地址，但必须手工将主机的硬件地址输入到 BootP表中。你可将 DHCP 视为动态的 BootP 。但别忘了， BootP也可用于发送操作系统，让主机使用它启动，而 DHCP 没有这样的功能。主机向 DHCP 服务器请求 IP 地址时， DHCP 服务器可将大量信息提供给主机。下面是 DHCP务器可提供的信息列表:IP 地址;日子网掩码:口域名;口默认网关(路由器);DNS 服务器的地址:WINS 服务器的地址。 DHCP 服务器还可提供其他信息，但上面列出的信息是最常见的。为获得田地址而发送 DHCP 发现消息的主机在第 层和第 层都发送广播:口第 层广播的地址在十六进制表示下全为 ，即 FF:FF:FF:FF:FF:曰:口第 层广播的地址为 255.255.255.255 ，这表示所有网络和所有主机。DHCP 是无连接的，这意味着它在传输层使用 UDP (User Data Pr侃侃。 ，用户数据报协议)，这层也叫主机到主机层，稍后将介绍它。为防止你不相信我，下面是我信任的分析器的输出示例:Ether‘net 11 , Src: 0.0.0.0 (00:Ob:db:99:d3:5e) ,Dst: Broadcast(ff:ff:ff:ff:ff:ff)1nternet Protocol , Src: 0.0.0.0 (O.O.O.O) ,Dst: 255.255.255.255(255.255.255.255)数据链路层和网络层都给”全体成员”发送广播，指出”帮帮我，我不知道自己的 地址”。 客户端向DHCP服务器请求IP地址 客户端向 DHCP 服务器请求 IP 地址的 个步骤如下:(1) DHCP 客户端广播一条 DHCP 发现消息，旨在寻找 DHCP 服务器(端口 67 );(2) 收到 DHCP 发现消息的 DHCP 服务器向主机发回一条单播 DHCP 提议消息;(3) 客户端向服务器广播一条 DHCP 请求消息，请求提议的 IP 地址和其他信息:(4) 服务器以单播方式发回一条 DHCP 确认消息，完成交互。 DHCP 冲突两台主机使用相同的 IP 地址时，就发生了 DHCP 地址冲突。这昕起来很糟糕，不是吗?当然糟 -糕!在介绍 IPv6 的那章，根本不需要讨论这个问题。在分配 IP 地址的过程中， DHCP 服务器在分配地址池中的地址前，将使用 ping 程序来测试其可用性。如果没有主机应答， DHCP 服务器将认为该 地址未分配出去。这有助于服务器知道它要分配的地址未被占用，但主机呢?为进一步避免如此糟糕的 地址冲突问题，主机可广播自己的地址。主机使用免费 ARP (gratuitous ARP )来帮助避免地址重复。为此， DHCP 客户端在本地 LANVLAN 中发送 盯广播，并要求解析分配新给它的地址，从而将冲突消灭在萌芽状态。如果检测到 IP 地址冲突，相应的 IP 地址将从 DHCP 地址池中删除;且在管理员手工解决冲突前，该地址不全被分配给任何主机，牢记这一点很重要。 TCP（传输控制协议）报文格式： TCP 报头长 208 (在包含选项时为 248 )，你必须理解 TCP 数据段中的每个字段。源端口 发送主机的应用程序的端口号(端口 将在本节后面解释)。目标端口 目标主机的应用程序的端口号。序列号 一个编号， TCP 用来将数据按正确的顺序重新排列(称为排序) 重传丢失或受损的数据。 确认号 TCP 期待接下来收到的数据段。 报头长度 TCP 报头的长度，以 32 位字为单位。它指出了数据的开始位置， TCP 报头的长度32 位的整数倍，即使包含选项时亦如此。口保留总是设置为零。口编码位/标志用于建立和终止会话的控制功能。口窗口大小 发送方愿意接受的窗口大小，单位为字节。lmI口校验和 CRC (Cyclic Redundancy Check ，循环冗余校验)，由于 TCP 不信任低层，因此检 咽跚跚查所有数据。 CRC 检查报头和数据字段。口紧急 仅当设置了编码位中的紧急指针字段时，该字段才有效。如果设置了紧急指针，该字段表示非紧急数据的开头位置相对于当前序列号的偏移量，单位为字节。口选项 长度为 32 位的整数倍。也就是说，没有选项时，长度为 。然而，如果包含选项时导致该字段的长度不是 32 位的整数倍，必须填充零，以确保该字段的长度为 32 位的整数倍。口数据传递给传输层的 TCP 协议的信息，包括上层报头。 UDP报文格式： 了解 UDP 数据段中的每个字段至关重要，如下。口源端口号发送主机的应用程序的端口号。日目标端口号 目标主机上被请求的应用程序的端口号口长度 UDP 报头和 UDP 数据的总长度。口校验和 UDP 报头和 UDP 数据的校验和。口数据上层数据。 IP报文格式： IP 报头如下字段： 口版本 IP 版本号。口报头长度报头的长度，单位为 32 位字。口优先级和服务类型服务类型指出应如何处理数据报。前 位为优先级位，当前称为区分服务位。口总长度整个分组的长度，包括报头和数据。口标识唯一的 分组值，用于区分不同的数据报。口标志指出是否进行了分段。口分段偏移 在分组太大，无法放入一个帧中时，提供了分段和重组功能。它还使得因特网上可有不同的 MTU (Maximum Transmission Unit ，最大传输单元)。口存活时间 生成分组时给它指定的存活时间。如果分组到达目的地之前 πL 就已到期，分组将被丢弃。这可避免 IP 分组因寻找目的地不断在网络中传输。口协议上层协议的端口 (TCP 为端口 UDP 为端口 7)。还支持网络层协议，如 盯和ICMP (在有些分析器中，该字段称为类型字段)。稍后我们将更详细地讨论该字段。口报头校验和对报头执行 CRC 的结果。口商、 IP 地址发送方的 32 IP 地址。口目标 IP 地址接收方的 32 IP 地址。口选顶用于网络测试、调试、安全等。口数据位于选项字段后，为上层数据。 ARPARP (Address Resolution Protocol ，地址解析协议)根据已知的IP 地址查找主机的硬件地址工作原理如下:四需要发送数据报时，它必须将目标端的硬件地址告知网络接入层协议，如以太网或无线。(上 层协议已经将目标端的IP 地址告诉它。)如果 IP 在ARP 援存中没有找到目标主机的硬件地址，它将使用 ARP 获悉这种信息。作为 IP的侦探， ARP 这样询问本地网络:发送广播，要求有特定IP 地址的机器使用其硬件地址进行应答。 因此， ARP基本上是将软件(IP) 地址转换为硬件地址 如目标 机的以太网网卡地址然后通过广播获悉该地址在 LAN 中的位置。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-08-09T09:33:35.074Z","updated":"2019-08-09T09:33:35.076Z","comments":true,"path":"2019/08/09/hello-world/","link":"","permalink":"https://eweerol.github.io/2019/08/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}